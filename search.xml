<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>利用DNS记录存储并分发文件</title>
      <link href="/2025/08/24/file-to-dns/"/>
      <url>/2025/08/24/file-to-dns/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>最近我看到了一则有人利用DNS记录下载文件的报道，觉得很有意思便亲自尝试了一下。本文<strong>仅</strong>简单讲述原理及思路，并附上成品代码。</p><div class="note warning modern"><p>请注意，本文所探讨的相关技术和思路<strong>仅用于学习与交流</strong>，所有代码必须在下载&#x2F;复制后24小时内删除，切勿用于任何非法用途！<br><em><strong>违反此规定造成的一切后果与本文作者无关。</strong></em></p></div><h2 id="原理及相关信息"><a href="#原理及相关信息" class="headerlink" title="原理及相关信息"></a>原理及相关信息</h2><p>域名可以创建TXT记录，本来是用于存储与域名相关的文本信息，但我们或许可以存一些其他的东西。 </p><p>首先来看一下TXT记录支持什么格式吧。<br>经本人测试（以<strong>Cloudflare</strong>为例）：TXT记录最大长度为<strong>2048字符</strong>（不含双引号，且双引号会被自动添加）；不支持部分特殊字符，例如支持<strong>base64</strong>编码表中的<strong>所有字符</strong>而不支持base85编码表中的部分字符；中文字符会被转义。<br>与此同时还发现，2048个字符并非在一个完整的字符串中，而是被分割为若干小字符串，每个255字符（不含双引号）。</p><p>由此发现将图片等文件转为<strong>base64</strong>编码应该效果不错。（但这会导致文件体积<strong>增大</strong>约33%）</p><p>如有其他疑问可自行测试，不再赘述。</p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><div class="note info simple"><p>注：所有代码均为<strong>AI生成</strong>，我只做了极少量修改，<em><strong>谨慎参考</strong></em>！！</p></div><h3 id="将文件base64编码"><a href="#将文件base64编码" class="headerlink" title="将文件base64编码"></a>将文件base64编码</h3><p>为了处理像图片这样的非文本文件，可以使用以下工具。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&#x27;文件与Base64编码转换工具&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;input&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;输入文件&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-d&#x27;</span>, <span class="string">&#x27;--decode&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;解码模式&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-o&#x27;</span>, <span class="string">&#x27;--output&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;输出文件&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> args.decode:</span><br><span class="line">        <span class="comment"># 解码模式</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(args.<span class="built_in">input</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;ascii&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            base64_str = f.read()</span><br><span class="line">            </span><br><span class="line">        <span class="comment"># 处理可能的填充字符</span></span><br><span class="line">        padding = <span class="built_in">len</span>(base64_str) % <span class="number">4</span></span><br><span class="line">        <span class="keyword">if</span> padding:</span><br><span class="line">            base64_str += <span class="string">&#x27;=&#x27;</span> * (<span class="number">4</span> - padding)</span><br><span class="line"></span><br><span class="line">        decoded = base64.b64decode(base64_str)</span><br><span class="line">        </span><br><span class="line">        output_file = args.output <span class="keyword">or</span> args.<span class="built_in">input</span>.replace(<span class="string">&#x27;.b64&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(output_file, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(decoded)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;解码完成: <span class="subst">&#123;output_file&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 编码模式</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(args.<span class="built_in">input</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data = f.read()</span><br><span class="line">        encoded = base64.b64encode(data).decode(<span class="string">&#x27;ascii&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        output_file = args.output <span class="keyword">or</span> args.<span class="built_in">input</span> + <span class="string">&#x27;.b64&#x27;</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(output_file, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;ascii&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(encoded)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;编码完成: <span class="subst">&#123;output_file&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>用法（编码文件）<code>python base64_tool.py myfile.txt</code>，其余用法可使用<code>-h</code>参数查看。</p><h3 id="将文件分割"><a href="#将文件分割" class="headerlink" title="将文件分割"></a>将文件分割</h3><p>使用以下脚本将上一步生成的<code>.b64</code>文件分割为每份2048字符的小文件以符合TXT记录的长度限制。生成的文件名带序号。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">split_b64_file</span>(<span class="params">input_file, chunk_size=<span class="number">2048</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    将Base64编码的文本文件分割成多个小文件</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        input_file: 输入的.b64文件路径</span></span><br><span class="line"><span class="string">        chunk_size: 每个小文件的字符数，默认为2048</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 检查输入文件是否存在</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(input_file):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;错误：文件 &#x27;<span class="subst">&#123;input_file&#125;</span>&#x27; 不存在&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 检查文件后缀</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> input_file.endswith(<span class="string">&#x27;.b64&#x27;</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;警告：文件 &#x27;<span class="subst">&#123;input_file&#125;</span>&#x27; 不是.b64后缀&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 读取文件内容</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(input_file, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            content = f.read().strip()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 获取文件名（不含扩展名）</span></span><br><span class="line">        base_name = os.path.splitext(input_file)[<span class="number">0</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 计算需要分割的文件数量</span></span><br><span class="line">        total_chars = <span class="built_in">len</span>(content)</span><br><span class="line">        num_chunks = (total_chars + chunk_size - <span class="number">1</span>) // chunk_size  <span class="comment"># 向上取整</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;文件总字符数: <span class="subst">&#123;total_chars&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;将分割为 <span class="subst">&#123;num_chunks&#125;</span> 个文件，每个最多 <span class="subst">&#123;chunk_size&#125;</span> 字符&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 分割文件</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_chunks):</span><br><span class="line">            start = i * chunk_size</span><br><span class="line">            end = start + chunk_size</span><br><span class="line">            chunk_content = content[start:end]</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 生成输出文件名</span></span><br><span class="line">            output_file = <span class="string">f&quot;<span class="subst">&#123;base_name&#125;</span>_part<span class="subst">&#123;i+<span class="number">1</span>:04d&#125;</span>.b64&quot;</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 写入分割后的文件</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(output_file, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(chunk_content)</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;已创建: <span class="subst">&#123;output_file&#125;</span> (字符数: <span class="subst">&#123;<span class="built_in">len</span>(chunk_content)&#125;</span>)&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;文件分割完成！&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;处理文件时发生错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 使用方法说明</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;使用方法: python split_b64.py &lt;filename.b64&gt;&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;示例: python split_b64.py myfile.b64&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    input_file = sys.argv[<span class="number">1</span>]</span><br><span class="line">    split_b64_file(input_file)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>用法：<code>python split_b64.py myfile.b64</code></p><p>我们便得到了一堆小<strong>纯文本</strong>文件。</p><h3 id="将文件内容上传到DNS"><a href="#将文件内容上传到DNS" class="headerlink" title="将文件内容上传到DNS"></a>将文件内容上传到DNS</h3><p>如果上一步分割出来的小文件很少，那么手动一个一个添加其实也无妨。但如果有上百个甚至上千个，无论如何是不能手动操作了。</p><p>所幸，大部分DNS解析提供商都会提供一个<strong>API接口</strong>来自动化完成这一操作。</p><h4 id="获取API令牌"><a href="#获取API令牌" class="headerlink" title="获取API令牌"></a>获取API令牌</h4><p>以Cloudflare为例，在<a href="https://dash.cloudflare.com/profile/api-tokens">此处</a>可以获取API令牌，直接使用<code>编辑区域 DNS</code>的模板再选择<code>区域资源</code>中想要编辑DNS记录的域名即可（<em><strong>要提前把域名托管到Cloudflare！</strong></em>）</p><p>再回到账户主页，打开相应域名，找到<code>区域 ID</code>并复制。</p><h4 id="自动化上传"><a href="#自动化上传" class="headerlink" title="自动化上传"></a>自动化上传</h4><p>直接使用以下脚本，将API令牌、区域ID、域名<strong>替换为自己的</strong>就行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span>, <span class="type">Optional</span>, <span class="type">Tuple</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CloudflareDNSManager</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, api_token: <span class="built_in">str</span>, zone_id: <span class="built_in">str</span>, base_domain: <span class="built_in">str</span></span>):</span><br><span class="line">        self.api_token = api_token</span><br><span class="line">        self.zone_id = zone_id</span><br><span class="line">        self.base_domain = base_domain</span><br><span class="line">        self.base_url = <span class="string">&quot;https://api.cloudflare.com/client/v4/zones&quot;</span></span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">&quot;Authorization&quot;</span>: <span class="string">f&quot;Bearer <span class="subst">&#123;api_token&#125;</span>&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">extract_sequence_number</span>(<span class="params">self, filename: <span class="built_in">str</span></span>) -&gt; <span class="type">Optional</span>[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        从文件名中提取序列号，支持各种格式如：</span></span><br><span class="line"><span class="string">        file_part0001.b64, data_segment001.txt, chunk123.b64等</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 匹配文件名中的数字序列</span></span><br><span class="line">        <span class="keyword">match</span> = re.search(<span class="string">r&#x27;(\d+)&#x27;</span>, filename)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">int</span>(<span class="keyword">match</span>.group(<span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_dns_record_id</span>(<span class="params">self, subdomain: <span class="built_in">str</span>, record_type: <span class="built_in">str</span> = <span class="string">&quot;TXT&quot;</span></span>) -&gt; <span class="type">Optional</span>[<span class="built_in">str</span>]:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取现有DNS记录的ID&quot;&quot;&quot;</span></span><br><span class="line">        url = <span class="string">f&quot;<span class="subst">&#123;self.base_url&#125;</span>/<span class="subst">&#123;self.zone_id&#125;</span>/dns_records&quot;</span></span><br><span class="line">        params = &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: record_type,</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">f&quot;<span class="subst">&#123;subdomain&#125;</span>.<span class="subst">&#123;self.base_domain&#125;</span>&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = requests.get(url, headers=self.headers, params=params, timeout=<span class="number">30</span>)</span><br><span class="line">            response.raise_for_status()</span><br><span class="line">            data = response.json()</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> data[<span class="string">&#x27;success&#x27;</span>] <span class="keyword">and</span> data[<span class="string">&#x27;result&#x27;</span>]:</span><br><span class="line">                <span class="keyword">return</span> data[<span class="string">&#x27;result&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">except</span> requests.RequestException <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;获取DNS记录失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_dns_record</span>(<span class="params">self, subdomain: <span class="built_in">str</span>, content: <span class="built_in">str</span>, record_type: <span class="built_in">str</span> = <span class="string">&quot;TXT&quot;</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;创建新的DNS记录&quot;&quot;&quot;</span></span><br><span class="line">        url = <span class="string">f&quot;<span class="subst">&#123;self.base_url&#125;</span>/<span class="subst">&#123;self.zone_id&#125;</span>/dns_records&quot;</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: record_type,</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">f&quot;<span class="subst">&#123;subdomain&#125;</span>.<span class="subst">&#123;self.base_domain&#125;</span>&quot;</span>,</span><br><span class="line">            <span class="string">&quot;content&quot;</span>: content,</span><br><span class="line">            <span class="string">&quot;ttl&quot;</span>: <span class="number">120</span>,  <span class="comment"># 自动TTL</span></span><br><span class="line">            <span class="string">&quot;comment&quot;</span>: <span class="string">f&quot;Automatically created from file sequence <span class="subst">&#123;subdomain&#125;</span>&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = requests.post(url, headers=self.headers, json=data, timeout=<span class="number">30</span>)</span><br><span class="line">            response.raise_for_status()</span><br><span class="line">            result = response.json()</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> result[<span class="string">&#x27;success&#x27;</span>]:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;✓ 成功创建记录 <span class="subst">&#123;subdomain&#125;</span>.<span class="subst">&#123;self.base_domain&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;✗ 创建记录失败: <span class="subst">&#123;result.get(<span class="string">&#x27;errors&#x27;</span>, <span class="string">&#x27;Unknown error&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                </span><br><span class="line">        <span class="keyword">except</span> requests.RequestException <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;✗ 请求创建记录失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_dns_record</span>(<span class="params">self, record_id: <span class="built_in">str</span>, subdomain: <span class="built_in">str</span>, content: <span class="built_in">str</span>, record_type: <span class="built_in">str</span> = <span class="string">&quot;TXT&quot;</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;更新现有的DNS记录&quot;&quot;&quot;</span></span><br><span class="line">        url = <span class="string">f&quot;<span class="subst">&#123;self.base_url&#125;</span>/<span class="subst">&#123;self.zone_id&#125;</span>/dns_records/<span class="subst">&#123;record_id&#125;</span>&quot;</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: record_type,</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">f&quot;<span class="subst">&#123;subdomain&#125;</span>.<span class="subst">&#123;self.base_domain&#125;</span>&quot;</span>,</span><br><span class="line">            <span class="string">&quot;content&quot;</span>: content,</span><br><span class="line">            <span class="string">&quot;ttl&quot;</span>: <span class="number">120</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = requests.put(url, headers=self.headers, json=data, timeout=<span class="number">30</span>)</span><br><span class="line">            response.raise_for_status()</span><br><span class="line">            result = response.json()</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> result[<span class="string">&#x27;success&#x27;</span>]:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;✓ 成功更新记录 <span class="subst">&#123;subdomain&#125;</span>.<span class="subst">&#123;self.base_domain&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;✗ 更新记录失败: <span class="subst">&#123;result.get(<span class="string">&#x27;errors&#x27;</span>, <span class="string">&#x27;Unknown error&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                </span><br><span class="line">        <span class="keyword">except</span> requests.RequestException <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;✗ 请求更新记录失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_file</span>(<span class="params">self, file_path: Path, target_subdomain: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;处理单个文件并上传到DNS记录&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 读取文件内容</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                content = f.read().strip()</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> content:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;✗ 文件 <span class="subst">&#123;file_path.name&#125;</span> 内容为空&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 检查TXT记录长度限制（Cloudflare TXT记录最大长度）</span></span><br><span class="line">            <span class="comment"># if len(content) &gt; 255:</span></span><br><span class="line">            <span class="comment">#    print(f&quot;⚠ 警告: &#123;file_path.name&#125; 内容超过255字符，可能被截断&quot;)</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 格式化子域名（确保4位数字）</span></span><br><span class="line">            formatted_subdomain = target_subdomain.zfill(<span class="number">4</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 检查记录是否已存在</span></span><br><span class="line">            record_id = self.get_dns_record_id(formatted_subdomain)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> record_id:</span><br><span class="line">                <span class="comment"># 更新现有记录</span></span><br><span class="line">                <span class="keyword">return</span> self.update_dns_record(record_id, formatted_subdomain, content)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 创建新记录</span></span><br><span class="line">                <span class="keyword">return</span> self.create_dns_record(formatted_subdomain, content)</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;✗ 处理文件 <span class="subst">&#123;file_path.name&#125;</span> 时出错: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_directory</span>(<span class="params">self, directory_path: <span class="built_in">str</span>, file_pattern: <span class="built_in">str</span> = <span class="string">&quot;*.b64&quot;</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;处理目录中的所有匹配文件&quot;&quot;&quot;</span></span><br><span class="line">        directory = Path(directory_path)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> directory.exists() <span class="keyword">or</span> <span class="keyword">not</span> directory.is_dir():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;✗ 目录不存在: <span class="subst">&#123;directory_path&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 获取所有匹配的文件并按序列号排序</span></span><br><span class="line">        files = []</span><br><span class="line">        <span class="keyword">for</span> file_path <span class="keyword">in</span> directory.glob(file_pattern):</span><br><span class="line">            seq_number = self.extract_sequence_number(file_path.name)</span><br><span class="line">            <span class="keyword">if</span> seq_number <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                files.append((seq_number, file_path))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> files:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;✗ 未找到包含序列号的文件&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 按序列号排序</span></span><br><span class="line">        files.sort(key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;找到 <span class="subst">&#123;<span class="built_in">len</span>(files)&#125;</span> 个文件，开始处理...&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line">        </span><br><span class="line">        success_count = <span class="number">0</span></span><br><span class="line">        failed_files = []</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> seq_number, file_path <span class="keyword">in</span> files:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;处理文件: <span class="subst">&#123;file_path.name&#125;</span> -&gt; <span class="subst">&#123;<span class="built_in">str</span>(seq_number).zfill(<span class="number">4</span>)&#125;</span>.<span class="subst">&#123;self.base_domain&#125;</span>&quot;</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> self.process_file(file_path, <span class="built_in">str</span>(seq_number)):</span><br><span class="line">                success_count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                failed_files.append(file_path.name)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 添加延迟避免API限制</span></span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;处理完成! 成功: <span class="subst">&#123;success_count&#125;</span>/<span class="subst">&#123;<span class="built_in">len</span>(files)&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> failed_files:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;失败的文件: <span class="subst">&#123;<span class="string">&#x27;, &#x27;</span>.join(failed_files)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 配置信息</span></span><br><span class="line">    API_TOKEN = <span class="string">&quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;</span>  <span class="comment"># 从环境变量获取更安全</span></span><br><span class="line">    ZONE_ID = <span class="string">&quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;</span>               <span class="comment"># 在Cloudflare域名概述页面找到</span></span><br><span class="line">    BASE_DOMAIN = <span class="string">&quot;file.xxx.com&quot;</span>             <span class="comment"># 你的基础域名（托管到Cloudflare的域名设为xxx.org）（不建议填写根域名）</span></span><br><span class="line">    DIRECTORY_PATH = <span class="string">&quot;./files&quot;</span>          <span class="comment"># 包含b64文件的目录路径</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 从环境变量获取敏感信息（推荐）</span></span><br><span class="line">    <span class="comment"># API_TOKEN = os.getenv(&#x27;CF_API_TOKEN&#x27;)</span></span><br><span class="line">    <span class="comment"># ZONE_ID = os.getenv(&#x27;CF_ZONE_ID&#x27;)</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> API_TOKEN <span class="keyword">or</span> <span class="keyword">not</span> ZONE_ID:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;请设置API_TOKEN和ZONE_ID&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建管理器实例</span></span><br><span class="line">    manager = CloudflareDNSManager(API_TOKEN, ZONE_ID, BASE_DOMAIN)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 处理目录中的所有b64文件</span></span><br><span class="line">    manager.process_directory(DIRECTORY_PATH, <span class="string">&quot;*.b64&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install requests</span><br><span class="line">pip install dnspython</span><br></pre></td></tr></table></figure><p>在脚本目录新建一个文件夹<code>files</code>，把切分好的小文件全放进去，运行脚本，文件内容就会自动<strong>按顺序</strong>上传到相应域名。文件顺序来自文件名，<strong>完美兼容上一步的脚本</strong>。例如<code>input_part0001.b64</code>将会上传到<code>0001.file.xxx.com</code>。</p><h3 id="从DNS记录还原文件"><a href="#从DNS记录还原文件" class="headerlink" title="从DNS记录还原文件"></a>从DNS记录还原文件</h3><p>使用以下脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> dns.resolver</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DNSFileReconstructor</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, dns_servers=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        初始化DNS文件重建器</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            dns_servers: DNS服务器列表，默认为Cloudflare和Google DNS</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.dns_servers = dns_servers <span class="keyword">or</span> [<span class="string">&#x27;1.1.1.1&#x27;</span>, <span class="string">&#x27;8.8.8.8&#x27;</span>]</span><br><span class="line">        self.resolver = dns.resolver.Resolver()</span><br><span class="line">        self.resolver.nameservers = self.dns_servers</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">download_txt_record</span>(<span class="params">self, domain: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        下载指定域名的TXT记录内容</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            domain: 要查询的域名</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            TXT记录内容字符串，失败返回空字符串</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;查询域名: <span class="subst">&#123;domain&#125;</span>&quot;</span>)</span><br><span class="line">            answers = self.resolver.resolve(domain, <span class="string">&#x27;TXT&#x27;</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 合并所有TXT记录字符串</span></span><br><span class="line">            txt_content = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">for</span> answer <span class="keyword">in</span> answers:</span><br><span class="line">                <span class="keyword">for</span> item <span class="keyword">in</span> answer.strings:</span><br><span class="line">                    txt_content += item.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 移除可能的引号</span></span><br><span class="line">            txt_content = txt_content.strip(<span class="string">&#x27;&quot;&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;获取成功，长度: <span class="subst">&#123;<span class="built_in">len</span>(txt_content)&#125;</span> 字符&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> txt_content</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">except</span> dns.resolver.NXDOMAIN:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;域名不存在: <span class="subst">&#123;domain&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">except</span> dns.resolver.NoAnswer:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;域名没有TXT记录: <span class="subst">&#123;domain&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">except</span> dns.resolver.Timeout:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;查询超时: <span class="subst">&#123;domain&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;查询域名 <span class="subst">&#123;domain&#125;</span> 时出错: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">download_all_parts</span>(<span class="params">self, base_domain: <span class="built_in">str</span>, start_part: <span class="built_in">int</span> = <span class="number">1</span>, max_parts: <span class="built_in">int</span> = <span class="number">1000</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        下载所有分片的TXT记录</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            base_domain: 基础域名</span></span><br><span class="line"><span class="string">            start_part: 起始分片号</span></span><br><span class="line"><span class="string">            max_parts: 最大尝试分片数</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            分片内容列表</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        all_parts = []</span><br><span class="line">        consecutive_failures = <span class="number">0</span></span><br><span class="line">        max_consecutive_failures = <span class="number">3</span>  <span class="comment"># 连续失败3次后停止</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> part_num <span class="keyword">in</span> <span class="built_in">range</span>(start_part, max_parts + <span class="number">1</span>):</span><br><span class="line">            <span class="comment"># 生成四位数序号的域名</span></span><br><span class="line">            domain = <span class="string">f&quot;<span class="subst">&#123;part_num:04d&#125;</span>.<span class="subst">&#123;base_domain&#125;</span>&quot;</span></span><br><span class="line">            </span><br><span class="line">            content = self.download_txt_record(domain)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> content:</span><br><span class="line">                all_parts.append(content)</span><br><span class="line">                consecutive_failures = <span class="number">0</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;成功下载第 <span class="subst">&#123;part_num&#125;</span> 部分&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                consecutive_failures += <span class="number">1</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;第 <span class="subst">&#123;part_num&#125;</span> 部分下载失败&quot;</span>)</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 如果连续失败多次，认为已经到达末尾</span></span><br><span class="line">                <span class="keyword">if</span> consecutive_failures &gt;= max_consecutive_failures:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;连续 <span class="subst">&#123;consecutive_failures&#125;</span> 次下载失败，停止搜索&quot;</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 添加短暂延迟，避免DNS查询过于频繁</span></span><br><span class="line">            time.sleep(<span class="number">0.1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> all_parts</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reconstruct_b64_file</span>(<span class="params">self, base_domain: <span class="built_in">str</span>, output_b64_file: <span class="built_in">str</span> = <span class="string">&quot;reconstructed.b64&quot;</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        从DNS TXT记录重建Base64文件</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            base_domain: 基础域名</span></span><br><span class="line"><span class="string">            output_b64_file: 输出的Base64文件路径</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            是否成功</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;开始从DNS TXT记录重建Base64文件...&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;基础域名: <span class="subst">&#123;base_domain&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 下载所有分片</span></span><br><span class="line">        parts = self.download_all_parts(base_domain)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> parts:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;没有成功下载任何分片&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 合并所有内容</span></span><br><span class="line">        full_content = <span class="string">&#x27;&#x27;</span>.join(parts)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 写入Base64文件</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(output_b64_file, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(full_content)</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;\nBase64文件重建成功！&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;总共下载: <span class="subst">&#123;<span class="built_in">len</span>(parts)&#125;</span> 个分片&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;总字符数: <span class="subst">&#123;<span class="built_in">len</span>(full_content)&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Base64文件: <span class="subst">&#123;output_b64_file&#125;</span>&quot;</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;写入Base64文件时出错: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decode_b64_file</span>(<span class="params">self, b64_file: <span class="built_in">str</span>, output_file: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        解码Base64文件为原始文件</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            b64_file: Base64编码的文件路径</span></span><br><span class="line"><span class="string">            output_file: 解码后的输出文件路径</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            是否成功解码</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;\n开始解码Base64文件: <span class="subst">&#123;b64_file&#125;</span>&quot;</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 读取Base64内容</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(b64_file, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                b64_content = f.read().strip()</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 解码Base64</span></span><br><span class="line">            <span class="comment"># 处理可能包含的换行符和空格</span></span><br><span class="line">            b64_content = b64_content.replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 解码</span></span><br><span class="line">            decoded_data = base64.b64decode(b64_content)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 写入输出文件</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(output_file, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(decoded_data)</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Base64解码成功！&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;输出文件: <span class="subst">&#123;output_file&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;文件大小: <span class="subst">&#123;<span class="built_in">len</span>(decoded_data)&#125;</span> 字节&quot;</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">except</span> base64.binascii.Error <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Base64解码错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;请检查Base64内容是否完整和正确&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;解码文件时出错: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reconstruct_and_decode</span>(<span class="params">self, base_domain: <span class="built_in">str</span>, output_file: <span class="built_in">str</span>, </span></span><br><span class="line"><span class="params">                             temp_b64_file: <span class="built_in">str</span> = <span class="string">&quot;temp_reconstructed.b64&quot;</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        完整的重建和解码流程</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            base_domain: 基础域名</span></span><br><span class="line"><span class="string">            output_file: 最终输出文件路径</span></span><br><span class="line"><span class="string">            temp_b64_file: 临时Base64文件路径</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            是否成功</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 第一步：从DNS重建Base64文件</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.reconstruct_b64_file(base_domain, temp_b64_file):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 第二步：解码Base64文件</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.decode_b64_file(temp_b64_file, output_file):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;\n 文件重建和解码完成！&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;原始文件已保存到: <span class="subst">&#123;output_file&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    主函数：处理命令行参数并执行重建流程</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &lt; <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;DNS TXT记录文件重建和解码工具&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;使用方法: python dns_reconstruct.py &lt;base_domain&gt; &lt;output_file&gt; [temp_b64_file]&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;示例: python dns_reconstruct.py file.xxx.com original_file.zip&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;示例: python dns_reconstruct.py file.xxx.com photo.jpg temp.b64&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n参数说明:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;  base_domain:   基础域名（不包含序号部分）&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;  output_file:   最终输出文件名&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;  temp_b64_file: 临时Base64文件名（可选，默认为temp_reconstructed.b64）&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 解析参数</span></span><br><span class="line">    base_domain = sys.argv[<span class="number">1</span>]</span><br><span class="line">    output_file = sys.argv[<span class="number">2</span>]</span><br><span class="line">    temp_b64_file = <span class="string">&quot;temp_reconstructed.b64&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &gt; <span class="number">3</span>:</span><br><span class="line">        temp_b64_file = sys.argv[<span class="number">3</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建重建器实例</span></span><br><span class="line">    reconstructor = DNSFileReconstructor()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 执行完整的重建和解码流程</span></span><br><span class="line">    success = reconstructor.reconstruct_and_decode(base_domain, output_file, temp_b64_file)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> success:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n❌ 文件重建失败&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>直接运行<code>python dns_reconstruct.py file.xxx.com photo.jpg</code>即可还原文件。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>至此，所有讲解已结束，如果有其他想法可继续交流。</p><p><em><strong>最后再强调</strong></em>：</p><div class="note danger modern"><p>严禁用于一切非法用途，后果自负！！！！！</p></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>易公交广告去除方案</title>
      <link href="/2025/07/02/yigongjiao/"/>
      <url>/2025/07/02/yigongjiao/</url>
      
        <content type="html"><![CDATA[<h1 id="易公交广告去除方案"><a href="#易公交广告去除方案" class="headerlink" title="易公交广告去除方案"></a>易公交广告去除方案</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>有些地区的公交居然要在易公交这个<strong>广告</strong>贼多的软件上才能查询，对很多人尤其是<strong>老年人群</strong>极度<strong>不</strong>友好！<br>而且，旧版本似乎现在已无法使用。</p><p>苦于软件使用了<strong>360加固</strong> ，因此只能用这个“ <strong>曲线救国</strong> ”的方案了。</p><p><strong>友情提示：</strong>本文图片虽多但由于采用webp格式，全文图片大小总和＜0.5MB，可放心浏览</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>使用自定义屏幕点击应用<a href="https://gkd.li/"><strong>GKD</strong></a>可以实现类似<strong>李跳跳</strong>的广告<strong>跳过</strong>效果。  </p><p>可以去除以下4种广告：</p><div style="    display: grid;    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));     /* 每列最小200px，自动填充剩余空间 */    gap: 10px;    justify-items: center;    margin: 0 auto;    max-width: 1200px;">    <img src="/images/8/1.webp" style="width: 100%;">    <img src="/images/8/2.webp" style="width: 100%;">    <img src="/images/8/3.webp" style="width: 100%;">    <img src="/images/8/4.webp" style="width: 100%;"></div><p>虽然在实质上并没有去除广告，但却能以<strong>极快的速度</strong>关闭广告，<strong>避免</strong>干扰视野或造成误操作。</p><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>本教程需要：</p><table><thead><tr><th>名称</th><th>下载链接</th><th>备注</th></tr></thead><tbody><tr><td><a href="https://gkd.li/">GKD</a></td><td><a href="https://gkd.li/guide">gkd.li</a></td><td>-</td></tr><tr><td><a href="https://shizuku.rikka.app/zh-hans/">Shizuku</a></td><td><a href="https://github.com/RikkaApps/Shizuku/releases/latest">Github</a>或<a href="https://apt.izzysoft.de/fdroid/index/apk/moe.shizuku.privileged.api">lzzyOnDroid</a></td><td>自行选择一个能打开的并下载安装</td></tr><tr><td>易公交</td><td>应用商店</td><td>-</td></tr><tr><td>一个好脑子</td><td>-</td><td>-</td></tr></tbody></table><h3 id="安装并配置GKD"><a href="#安装并配置GKD" class="headerlink" title="安装并配置GKD"></a>安装并配置GKD</h3><p>请参考<strong>官方教程</strong>：<a href="https://gkd.li/guide/">开始使用</a><br>如有疑问请前往官方页面：<a href="https://gkd.li/guide/faq">常见问题</a></p><p><em><strong>截止现在，您应当已安装GKD并授予了无障碍权限</strong></em></p><p><strong>注意：</strong> 无障碍权限某些机型重启手机可能需要重新授予</p><p>接下来，先将这一段文本复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; id:&#x27;com.cictec.busintelligentonline&#x27;, name:&#x27;易公交&#x27;, groups:[   &#123;     key:1,     name:&#x27;线路信息界面&#x27;,     desc:&#x27;关闭广告&#x27;,     enable:true,     actionMaximum:10000,     activityIds:[       &#x27;com.cictec.ibd.base.model.easy.EasyMainActivity&#x27;     ],     rules:[       &#123;         matches:[           &#x27;[id=&quot;com.cictec.busintelligentonline:id/ms_item_pre_render_smallimage_close&quot;][text=&quot;✕&quot;]&#x27;         ]       &#125;     ]   &#125;,   &#123;     key:2,     name:&#x27;主界面&#x27;,     desc:&#x27;关闭广告&#x27;,     enable:true,     actionMaximum:10000,     activityIds:[       &#x27;.ui.MainActivity&#x27;     ],     rules:[       &#123;         matches:[           &#x27;[id=&quot;com.cictec.busintelligentonline:id/ms_item_pre_render_smallimage_close&quot;][text=&quot;✕&quot;]&#x27;         ]       &#125;     ]   &#125;,   &#123;     key:3,     name:&#x27;开屏广告&#x27;,     desc:&#x27;关闭广告&#x27;,     enable:true,     actionMaximum:1,     activityIds:[       &#x27;.ui.LoadingActivity&#x27;     ],     rules:[       &#123;         excludeMatches:[           &#x27;([text*=&quot;搜索&quot; || text^=&quot;猜你想&quot; || text^=&quot;猜你喜欢&quot; || text=&quot;历史记录&quot; || text$=&quot;在搜&quot;][text.length&gt;3 &amp;&amp; text.length&lt;7][visibleToUser=true]) || ([text=&quot;设置&quot; || text=&quot;退款详情&quot; || text=&quot;Submit&quot;][visibleToUser=true])&#x27;         ],         anyMatches:[           &#x27;[text*=&quot;跳过&quot;][text.length&lt;10][visibleToUser=true]&#x27;,           &#x27;[childCount=0][visibleToUser=true][(text.length&lt;10 &amp;&amp; (text*=&quot;跳过&quot; || text*=&quot;跳過&quot; || text~=&quot;(?is).*skip.*&quot;)) || (vid~=&quot;(?is).*skip.*&quot; &amp;&amp; vid!~=&quot;(?is).*video.*&quot; &amp;&amp; text!=&quot;帮助&quot; &amp;&amp; text!=&quot;取消&quot;) || id$=&quot;tt_splash_skip_btn&quot; || (desc.length&lt;10 &amp;&amp; (desc*=&quot;跳过&quot; || desc*=&quot;跳過&quot; || desc~=&quot;(?is).*skip.*&quot;))]&#x27;         ]       &#125;     ]   &#125; ]&#125;</span><br></pre></td></tr></table></figure><p>然后请按以下图片所示步骤逐步导入规则:</p><div style="    display: grid;    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));     /* 每列最小200px，自动填充剩余空间 */    gap: 10px;    justify-items: center;    margin: 0 auto;    max-width: 1200px;">    <img src="/images/8/5.webp" style="width: 100%;">    <img src="/images/8/6.webp" style="width: 100%;">    <img src="/images/8/7.webp" style="width: 100%;">    <img src="/images/8/8.webp" style="width: 100%;">    <img src="/images/8/9.webp" style="width: 100%;"></div><h3 id="安装并配置Shizuku"><a href="#安装并配置Shizuku" class="headerlink" title="安装并配置Shizuku"></a>安装并配置Shizuku</h3><p>由于软件限制，单纯的无障碍权限并<strong>不能</strong>获取到广告关闭按钮的id。<br>因此需要<strong>更高级</strong>的权限。</p><p>同样请参阅官方文档： <a href="https://shizuku.rikka.app/zh-hans/guide/setup/">用户手册</a></p><p>配置完毕后，应如图所示：</p><div style="    display: grid;    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));     /* 每列最小200px，自动填充剩余空间 */    gap: 10px;    justify-items: center;    margin: 0 auto;    max-width: 1200px;">    <img src="/images/8/12.webp" style="width: 100%;"></div><p><em><strong>注意：重启手机后需重新启动Shizuku</strong></em></p><h3 id="让GKD使用Shizuku"><a href="#让GKD使用Shizuku" class="headerlink" title="让GKD使用Shizuku"></a>让GKD使用Shizuku</h3><p>按如下操作。若有权限弹窗请点击<strong>允许</strong>  </p><div style="    display: grid;    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));     /* 每列最小200px，自动填充剩余空间 */    gap: 10px;    justify-items: center;    margin: 0 auto;    max-width: 1200px;"><img src="/images/8/10.webp" style="width: 100%;"><img src="/images/8/11.webp" style="width: 100%;"></div><h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>现在，从<strong>理论上</strong>讲GKD已经可以自动帮助您跳过广告了！</p><p>如有任何疑问，请发邮件至<a href="mailto:&#119;&#115;&#114;&#x79;&#48;&#x32;&#48;&#x32;&#51;&#x40;&#x6f;&#x75;&#x74;&#x6c;&#111;&#x6f;&#x6b;&#x2e;&#99;&#x6f;&#109;">&#119;&#115;&#114;&#x79;&#48;&#x32;&#48;&#x32;&#51;&#x40;&#x6f;&#x75;&#x74;&#x6c;&#111;&#x6f;&#x6b;&#x2e;&#99;&#x6f;&#109;</a></p><hr><p><strong>感谢您的阅读！</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>超详细的装系统教程</title>
      <link href="/2023/03/17/zhuangxitongjc/"/>
      <url>/2023/03/17/zhuangxitongjc/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>相信很多人都会有给自己电脑重装系统的需求，如果去店里怎么着也得花20块左右，尽管不是很多也省去了一些麻烦，不过我觉得还是没有必要…<br>废话不多说了，直接开始吧</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>这里建议使用U盘来装系统（<del>不会有人还用光盘吧</del>）。<br>U盘容量建议在<code>8G</code>及以上<br>准备个U盘就差不多可以开始了</p><p>事先说一下，下面主要分这几种安装方式，直接按您的需求点击跳转着看就可以：<br>（有很多内容是重复的，请按照提示随时跳转。另外，有些步骤我没说的话默认就是<code>下一步</code>）</p><table><thead><tr><th>名称</th><th>适用情况</th><th>特点</th></tr></thead><tbody><tr><td><a href="#%E7%9B%B4%E6%8E%A5%E5%8D%87%E7%BA%A7">直接升级</a></td><td>电脑正在正常使用旧系统想升级为新系统</td><td>操作最简单、无需备份数据</td></tr><tr><td><a href="#%E5%B0%86%E9%95%9C%E5%83%8F%E5%88%BB%E5%BD%95%E5%88%B0U%E7%9B%98">将镜像刻录到U盘</a></td><td>系统已损坏</td><td>安装较为简单但局限性大</td></tr><tr><td><a href="#%E4%BD%BF%E7%94%A8PE%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85">使用PE系统安装</a></td><td>系统已损坏</td><td>安装较为复杂但PE系统自带了众多实用系统工具且最为灵活</td></tr></tbody></table><h2 id="直接升级"><a href="#直接升级" class="headerlink" title="直接升级"></a>直接升级</h2><p>确保您的电脑可以正常运行exe程序，然后打开<strong>官方网页</strong><a href="https://www.microsoft.com/zh-cn/software-download/windows10">https://www.microsoft.com/zh-cn/software-download/windows10</a> 点击蓝色按钮<code>立即下载工具</code>，下载完成后直接打开，接受条款，再选中<code>升级</code>后点击<code>下一步</code>即可，没啥难度，按提示来就好。<br><img src="/images/6/1.webp" alt="1"></p><h2 id="将镜像刻录到U盘"><a href="#将镜像刻录到U盘" class="headerlink" title="将镜像刻录到U盘"></a>将镜像刻录到U盘</h2><p>确保您有一台可以正常运行exe程序的电脑(<del>自己的打不开但可以借对吧</del>)，然后打开<strong>官方网页</strong><a href="https://www.microsoft.com/zh-cn/software-download/windows10">https://www.microsoft.com/zh-cn/software-download/windows10</a> 点击蓝色按钮<code>立即下载工具</code>，下载完成后直接打开，接受条款，按下图操作<br><img src="/images/6/2.webp" alt="2"></p><p>下一步保持默认即可<br>此处选择<code>U盘</code><br><img src="/images/6/3.webp" alt="3"><br>下一步中选择你要把镜像刻录到的U盘，再点下一步，按照提示操作来即可</p><p>耐心等待U盘制作完毕<br><em><strong>！请注意，这将会清空U盘中所有内容！</strong></em></p><p>然后，打开需要装系统的电脑，在开机时按下主板BIOS快捷键，可参考下图，也可自行在网上查找  </p><p><em>如果说您是被搜索引擎跳转至此处，请点击<a href="#%E5%BC%95%E8%A8%80">这里</a>回到文章顶部！</em></p><p><img src="/images/6/4.webp" alt="4"></p><p>进入BIOS后选择U盘就可以了（一般来说若你的U盘是16G的，写着<code>XXXX XXXXX-XXXXX（16GB）</code>的就是U盘，或者可以看型号。找到U盘后按上下键选中后回车即可进入）</p><p>注意部分主板需要先按<code>→</code>键移动到<code>boot</code>后再选择U盘,并且需要按<code>+</code>将U盘顶到最上面再按<code>F10</code>后保存重启<br><img src="/images/6/16.webp" alt="16"></p><p>如果看到下图所示内容就代表成功进入了！<br><img src="/images/6/5.webp" alt="5"></p><p>接着点击<code>下一步</code> <code>现在安装</code> <code>我没有产品密钥</code><br>接着选择你要安装的版本，这里我选了<code>专业版</code><br><img src="/images/6/6.webp" alt="6">  </p><p>继续下一步，<code>接受许可条款</code>，下图选择<code>自定义</code><br><img src="/images/6/7.webp" alt="7"></p><p>这一步如果以前分好区了就可以不分，直接装在以前的系统盘中（最好格式化一下，<em><strong>请提前备份好数据！</strong></em>），如果没分过区可以点击<code>新建</code>后输入大小（<code>1GB=1024MB</code>，如<code>50GB</code>为<code>51200MB</code>）。当然，也可以不分区（不过还是建议分俩区）<br><img src="/images/6/8.webp" alt="8"></p><p>然后点击确定就开始安装了<br><img src="/images/6/9.webp" alt="9"></p><p>需要耐心等待一会。<br>后续教程请跳转<a href="#%E9%85%8D%E7%BD%AE">这里</a></p><h2 id="使用PE系统安装"><a href="#使用PE系统安装" class="headerlink" title="使用PE系统安装"></a>使用PE系统安装</h2><p>确保您有一台可以正常运行exe程序的电脑(<del>自己的打不开但可以借对吧</del>)，下载<code>WEPE工具箱</code>（也可以单击<a href="https://www.123912.com/s/h6F5Vv-OHNBH">此处</a>下载（<em><strong>登录账号后即可通过浏览器下载</strong></em>））</p><details class="toggle" ><summary class="toggle-button" style="">下载遇到问题？</summary><div class="toggle-content"><ul><li>链接失效、打不开</li><li><ul><li>先去网上自己再找一个安装包，强烈建议使用<strong>WEPE</strong></li></ul></li><li><ul><li>然后告诉我，我会尽快补一个</li></ul></li></ul><details class="toggle" ><summary class="toggle-button" style="">为什么下载要收我一块钱？</summary><div class="toggle-content"><p><strong>我tm哪知道，这网盘又不是我开的？！</strong></p><p>再说了我不是都告诉你<em><strong>登录</strong></em>后就可以免费下载了吗？</p></div></details>  </div></details>  <p>插入U盘，然后打开软件，再单击这里<br><img src="/images/6/13.webp" alt="13">  </p><p>保持默认选项或按下图配置即可，然后单击<code>立即安装进U盘</code>就可以了<br><em><strong>！此操作会清除U盘所有数据！</strong></em></p><p>等待进度条走完就可以了。</p><p>然后打开<strong>官方网页</strong><a href="https://www.microsoft.com/zh-cn/software-download/windows10">https://www.microsoft.com/zh-cn/software-download/windows10</a> 点击**蓝色按钮<code>立即下载工具</code>**，下载完成后直接打开，接受条款，按下图操作<br><img src="/images/6/2.webp" alt="2"></p><p>下一步保持默认即可<br>此处选择<code>ISO文件</code><br><img src="/images/6/12.webp" alt="12"><br>然后选择保存的位置（为了方便，你可以将它直接保存在U盘里）<br>等它下载完成就会在你选择的位置里看到<code>windows.iso</code>这个文件了，这就是系统镜像。</p><p>打开需要装系统的电脑，在开机时按下主板BIOS快捷键，可参考下图，也可自行在网上查找    </p><p><em>如果说您是被搜索引擎跳转至此处，请点击<a href="#%E5%BC%95%E8%A8%80">这里</a>回到文章顶部！</em></p><p><img src="/images/6/4.webp" alt="4"></p><p>进入BIOS后选择U盘就可以了（一般来说若你的U盘是16G的，写着<code>XXXX XXXXX-XXXXX（64GB）</code>的就是U盘，或者可以看型号。找到U盘后按上下键选中后回车即可进入）</p><p>注意部分主板需要先按<code>→</code>键移动到<code>boot</code>后再选择U盘,并且需要按<code>+</code>将U盘顶到最上面再按<code>F10</code>后保存重启<br><img src="/images/6/16.webp" alt="16"></p><p>如果看到下图中任意一个就代表成功进入了！<br><img src="/images/6/15.webp" alt="15"><br><img src="/images/6/17.webp" alt="17"></p><p>进入PE桌面后可以先打开<code>DiskGenius</code>分个区或格式化下系统盘，当然也可以不分区</p><p>打开<code>Windows安装器</code>，按下图来就可以<br><img src="/images/6/18.webp" alt="18"></p><p>等待进度条走完</p><p>下一步请跳转<a href="#%E9%85%8D%E7%BD%AE">这里</a></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>重启电脑后耐心等待一下，然后就会进入OOBE界面了。<br><img src="/images/6/10.webp" alt="10"><br>建议此时把网络断开，然后一路下一步即可，接着点击<code>我没有Internet链接</code>、 <code>继续执行有限操作</code>，后面用户名可以随便取一个，密码可以直接下一步，最后点击<code>接受</code>、<code>以后再说</code>即可进入桌面，然后就大功告成了！<br><img src="/images/6/11.webp" alt="11"></p><hr><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>恭喜你，你已经学会了如何装系统！</p><p>这个教程可能不是特别详细，很多地方没有配图只有文字。如果有疑问，请上网查询或联系我获取帮助(QQ<code>2098581065</code>)</p><p>感谢您的阅读！</p><hr><p>—THE END—</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>抛硬币模拟工具食用教程</title>
      <link href="/2023/01/29/paoyingbi/"/>
      <url>/2023/01/29/paoyingbi/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>这是一款可以模拟抛硬币的软件 <del>没啥好介绍的吧</del></p><p>先来讲一下使用方法，如果要看原理请跳转到<a href="#%E5%8E%9F%E7%90%86">这里</a></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>双击打开即可  </p><p>第一次打开或者将配置文件删除会弹出这个提示，<strong>请仔细阅读</strong>。<br><strong>默认</strong>勾选<code>下次不再提示</code>，点击<strong>确定</strong>后<strong>将写入</strong>配置文件 (<del>不要在意配置文件内容我瞎写的</del>)  </p><p><img src="/images/5/1.webp" alt="1"><br>如果您<strong>不希望</strong>生成配置文件，请<strong>取消勾选</strong>并以后<strong>不要</strong>点击<code>保存数据</code></p><p>进入后，软件界面应该如图所示。<br><img src="/images/5/2.webp" alt="2"></p><p>你可以点击按钮来抛有限次数(<del>只支持双数，至于为啥会在<a href="#%E5%8E%9F%E7%90%86">原理</a>中讲到</del>)</p><p>如果要计算正面的概率，单击<code>计算概率</code>即可 (<del>反面概率自己算去</del></p><h3 id="自动模式"><a href="#自动模式" class="headerlink" title="自动模式"></a>自动模式</h3><p>如果单靠点按钮那点速度，效率是极低的。<br>所以可以使用<strong>自动模式</strong></p><p>目前支持<code>自动抛硬币</code> <code>自动计算概率</code> <code>自动保存</code> 三种<br>如果需要使用哪种功能的话直接选中即可<br>！将选择框选中前请<strong>先输入间隔时间</strong>！<br>更多内容请在软件内点击<code>获取帮助</code>按钮或看下图<br><img src="/images/5/3.webp" alt="3"></p><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p>自3.0版本起支持多线程</p><p>很简单，如果你需要多少线程在<code>线程数</code>里输入多少就行了<br><strong>线程数并不是越多越好！</strong></p><p><code>30线程</code>并且间隔时间为<code>1毫秒</code>时大约每秒有<code>2500</code>次，约一天就能抛<code>200000000(即2亿)</code>次</p><p>总之是能在<strong>一定程度上</strong>提高速度</p><h3 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h3><p>多线程运行时间久了(约20分钟)会出现突然停止工作的现象<br>(<del>貌似是ntdll.dll的问题？</del>)</p><p>目前限于能力我不知道如何修复这个bug，所以我整了个守护进程<br>(由于精力有限所以守护进程源码来自互联网)</p><p>请将守护进程与抛硬币模拟软件放在<strong>同一目录</strong>下，并且请<strong>先</strong>运行守护进程！</p><p>如果未开启守护进程或未在同一目录下运行你将会看到如下提示<br><img src="/images/5/4.webp" alt="4"><br>不开启守护进程虽然<strong>不影响正常运行</strong>但在其崩溃后<strong>将无法自动重启</strong>，所以<em><strong>如果要长时间运行请打开<code>自动保存</code>并配合守护进程使用！</strong></em></p><p>至此，你已经会使用这个没用的软件了。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>非常简单的原理，每次抛的时候会<strong>随机</strong>从<code>1-100</code>这100个数字随机选取一个<strong>整数</strong>，记为<code>x</code>。若<code>1≤x≤50</code>，则记为<strong>正</strong>面，若<code>51≤x≤100</code>，则记为<strong>反</strong>面。<br>然后会再次在<code>0-100</code>中选取一个整数，记为<code>y</code>。不同的是，这次正反面判定方式与上面<strong>恰好相反</strong>，即<code>1≤y≤50</code>时记为<strong>反</strong>面，<code>51≤y≤100</code>时记为<strong>正</strong>面。</p><p>这就是为什么上文提到只能抛偶数个的原因，或许有助于<strong>减小误差</strong>。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>放个下载链接：<br>最新版本下载：<a href="/images/5/3.5.exe">点击下载</a><br>守护进程下载：<a href="/images/5/%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B.exe">点击下载</a></p><p>在最后，我真的什么也不想说了。放个时间轴在下面吧。<br>（另外说一下，软件图标都是随便取的，请不要在意）</p><hr><div class="timeline green"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2023</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-04</p></div></div><div class='timeline-item-content'><p>最初版本1.0</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-06</p></div></div><div class='timeline-item-content'><p>2.0版本：相较于上个版本只颠倒了正反面判定方式</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-20</p></div></div><div class='timeline-item-content'><p>3.0版本：支持多线程，但是很容易无响应，<del>甚至不如上一个版本（</del></p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-25</p></div></div><div class='timeline-item-content'><p>3.1版本：稍微优化，但是在运行约43s后会有一大堆弹窗错误</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-27</p></div></div><div class='timeline-item-content'><p>3.2版本：上述问题基本修复</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-28</p></div></div><div class='timeline-item-content'><p>3.3版本：加入保存&#x2F;读取数据功能</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-29</p></div></div><div class='timeline-item-content'><p>经短期测试发现较稳定后开始写这篇文章</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-31</p></div></div><div class='timeline-item-content'><p>3.4版本：相较于3.3变更较少，优化了部分内容（包括界面）</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>02-02</p></div></div><div class='timeline-item-content'><p>3.5版本：经过长期挂机发现在运行约20分钟后会突然闪退，该版本加入了守护进程和全自动模式，更适合长期挂机</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>03-04</p></div></div><div class='timeline-item-content'><p>断断续续将进两个月才终于写完这篇文章</p></div></div></div><hr><p><strong>–THE END–</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ClassIn网课指南</title>
      <link href="/2023/01/17/ClassIn-wangkezhibei/"/>
      <url>/2023/01/17/ClassIn-wangkezhibei/</url>
      
        <content type="html"><![CDATA[<h2 id="警告"><a href="#警告" class="headerlink" title="警告"></a>警告</h2><div class="note warning flat"><p>警告！<br>如果你在网课期间打开了这篇文章，请立即退出并认真听老师讲课！</p><p>请勿模仿本文中的行为！</p><p>请不要尝试于老师”斗智斗勇”！这对你来说没有任何意义！</p></div><div class="note danger flat"><p>最后一次警告！！！！</p><p>重申一遍，如果你在网课期间打开了这篇文章，请立即退出并认真听老师讲课！</p><p>请勿模仿本文中的行为！</p><p>本文作者不对任何模仿者所做出的行为负责！！</p></div><p><strong>确定继续浏览？</strong></p><hr><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>众所周知，ClassIn是一个常用的网课软件，而它的<code>专注模式</code>又使不少用户头痛。那么，要怎么解除呢？</p><p>事实上，<code>专注模式</code>关不掉<br><del>但你既然冒着风险来了，我也不能啥都不教吧</del></p><p>但是有克服<code>专注模式</code>继续玩耍的方法</p><div class="note info simple"><p>本文方法仅适用于<code>Windows</code>系统，最低为<code>Windows 7</code></p></div><h3 id="Windows-10-x2F-Windows-11"><a href="#Windows-10-x2F-Windows-11" class="headerlink" title="Windows 10&#x2F;Windows 11"></a>Windows 10&#x2F;Windows 11</h3><p><strong>如果你正在使用的是<code>Windows 7</code>，请跳转<a href="#Windows7">这里</a></strong></p><h4 id="多任务"><a href="#多任务" class="headerlink" title="多任务"></a>多任务</h4><p>Win10&#x2F;11相对于Win7来说会更简单一些。<br>因为Win11和Win10操作方法是一样的，所以下面<strong>仅</strong>展示Win10的操作方法。</p><h5 id="新建桌面"><a href="#新建桌面" class="headerlink" title="新建桌面"></a>新建桌面</h5><p>（课前准备）<br>观察下任务栏，不难发现有个叫<code>任务视图</code>的东西<br><img src="/images/4/1.webp" alt="1"><br>如果没有，请<strong>右键</strong>任务栏，把<code>显示“任务视图”按钮</code>打开就好了<br><img src="/images/4/2.webp" alt="2"><br>点击后会出现下面这个界面<br><img src="/images/4/3.webp" alt="3"><br>点击<code>新建桌面</code><br>像这样，第二个桌面(即<code>桌面2</code>)就准备好了<br><img src="/images/4/4.webp" alt="4">  </p><h5 id="切换桌面"><a href="#切换桌面" class="headerlink" title="切换桌面"></a>切换桌面</h5><p>此时假设<strong>已经</strong>开课。  </p><h6 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h6><p>按下win键(就是四个方框的那个键)，此时任务栏就出来了，点击<code>任务视图</code>图标后点击<code>桌面2</code>切换即可<br><img src="/images/4/5.webp" alt="5">  </p><h6 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h6><p>这个方法对有<strong>触摸板</strong>的用户来说非常方便。<br>用<code>4</code>根手指同时向左←滑动即可快速切换到<code>桌面2</code>，向右→划就返回<code>桌面1</code></p><p>这个切换方法是可以在<code>设置→设备→触摸板</code>更改的,怎么方便怎么来<br><img src="/images/4/9.webp" alt="9">  </p><h6 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h6><p>如果你的电脑<strong>没有</strong>触摸板也想这样的话<br>可以按下<code>ctrl+win+→</code>(三个键同时按)来快速切换桌面。</p><p>到第二个桌面后你就可以<del>随心所欲</del>了</p><p>另外还有<strong>不用任务视图</strong>的方法，与Win7通用，就放下面了</p><h3 id="Windows7"><a href="#Windows7" class="headerlink" title="Windows7"></a>Windows7</h3><p>由于win7没有任务视图，所以需要将教室窗口的<strong>置顶取消</strong>掉，这样打开其他应用才<strong>不会</strong>被盖在底下。</p><p>我用的第三方工具是<code>WindowsTop</code>，可以去<a href="https://windowtop.info/">官网</a>下载并购买</p><p>不过我用的是老版本破解版。  </p><details class="toggle" ><summary class="toggle-button" style="">点击展开</summary><div class="toggle-content"><p><a href="/images/4/WinTop.exe">点击下载</a></p><p>上课前<strong>先</strong>打开注册下软件<br>会提示输入用户名和许可证，不用管它，乱填一通就行<br>如果注册失败请尝试管理员身份运行<br><img src="/images/4/6.webp" alt="6"><br><img src="/images/4/7.webp" alt="7">  </p></div></details><p>上课时用你能用的<strong>任何方法</strong>打开它，它会置于教室窗口之上(前提是<strong>不要手残选中教室窗口</strong>)，<strong>直接拖动手型图标</strong>到教室窗口就能取消置顶了。<br>或者在<strong>选中</strong>教室窗口(就是鼠标点一下教室窗口)<strong>后</strong>按<code>ctrl+F8</code>即可将选中窗口置顶&#x2F;取消置顶(笔记本用户可能需要<strong>额外</strong>按下<code>fn</code>)<br><img src="/images/4/8.webp" alt="8">  </p><p>当然你用其他工具也可以，能<strong>取消置顶</strong>就行</p><p>这样，就可以在教室窗口上方打开其他应用而不被盖住了~</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>不知道这篇对你有没有帮助呢？<br>不要忘了<a href="#%E8%AD%A6%E5%91%8A">前面的内容</a>啊！</p><p>（手动滑稽</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>计算器使用教程</title>
      <link href="/2023/01/15/jisuanqi/"/>
      <url>/2023/01/15/jisuanqi/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>这是一款我自制的计算器，<del>写的很烂而且功能也不多</del><br><strong>仅</strong>支持运算<strong>小数</strong>及<strong>整数</strong>的<strong>加减乘除</strong>运算<br>另外<strong>可以使用键盘操作</strong></p><h2 id="食用方法"><a href="#食用方法" class="headerlink" title="食用方法"></a>食用方法</h2><p><del>开袋即食，亦可凉拌、油炸(抱歉走错了</del></p><p>下载最新版本后双击打开，会看到如下图：<br><img src="/images/3/1.webp" alt="tupian"><br>在使用前先了解一下除<code>0-9</code>, <code>+-×÷</code>, <code>=</code>, <code>→</code>这些大家都熟悉的外的按键的作用。不想看可以跳转<a href="#%E5%85%B7%E4%BD%93%E9%A3%9F%E7%94%A8%E6%96%B9%E6%B3%95">到这里</a></p><h3 id="按键作用介绍"><a href="#按键作用介绍" class="headerlink" title="按键作用介绍"></a>按键作用介绍</h3><h4 id="CE"><a href="#CE" class="headerlink" title="CE"></a>CE</h4><p>单击<code>CE</code>会清除当前最大编辑框里的内容<br>例如：<br>按<code>CE</code>前↓<br><img src="/images/3/2.webp" alt="tupian"><br>按<code>CE</code>后↓<br><img src="/images/3/3.webp" alt="tupian">  </p><h4 id="C"><a href="#C" class="headerlink" title="C"></a>C</h4><p>单击<code>C</code>会清除当前所有框内的内容<br>例如：<br>按<code>C</code>前↓<br><img src="/images/3/4.webp" alt="tupian"><br>按<code>C</code>后↓<br><img src="/images/3/5.webp" alt="tupian">  </p><h3 id="具体食用方法"><a href="#具体食用方法" class="headerlink" title="具体食用方法"></a>具体食用方法</h3><h4 id="鼠标单击输入"><a href="#鼠标单击输入" class="headerlink" title="鼠标单击输入"></a>鼠标单击输入</h4><p>就像一个普通的计算器来使用就可以了~（<del>没什么好讲的吧</del>）<br>另外提醒一下，<strong>每次计算完毕</strong>后记得按一下<code>C</code>键清除内容避免发生意外(<del>还有我是<strong>不会</strong>告诉你<strong>即使不</strong>按C键，当下次输入时会<strong>自动</strong>帮你清除内容的</del>)</p><h4 id="键盘输入模式"><a href="#键盘输入模式" class="headerlink" title="键盘输入模式"></a>键盘输入模式</h4><p>相信你一定注意到右下角那个写着“监听键盘”的选项了吧<br><img src="/images/3/6.webp" alt="tupian"><br><strong>默认</strong>是<strong>打开</strong>的，可以<strong>单击关闭</strong><br><em><strong>注意：</strong></em> <strong>只有当最大的编辑框被选中时(也就是像下图那样有蓝色边缘时)才会有用，如果没有，请单击编辑框</strong><br><img src="/images/3/7.webp" alt="right"><br><img src="/images/3/8.webp" alt="wrong"><br>然后就可以用键盘输入了~（<del>键盘怎么用不需要我说吧</del>）</p><h3 id="自定义按键"><a href="#自定义按键" class="headerlink" title="自定义按键"></a>自定义按键</h3><p><strong>什么？</strong>你说按键不准 明明按的<code>+</code>这个键却显示按下了<code>*</code>？  </p><p>这个方法可以拯救你！</p><p>在2.6及以后的版本中，右键窗口空白部分即可弹出菜单</p><p><img src="/images/3/9.webp" alt="tupian"></p><p>按下菜单后会打开一个新窗口，需要<strong>先将鼠标在编辑框上点一下</strong>，红色的字变成<strong>绿色</strong>就可以了</p><p><img src="/images/3/10.webp" alt="tupian"></p><p>如果在键盘上并没有找到对应的按键，直接<strong>跳过即可</strong></p><p>这样是不是输入就和键盘匹配了呢？</p><h3 id="连续运算"><a href="#连续运算" class="headerlink" title="连续运算"></a>连续运算</h3><p>如<a href="#%E9%BC%A0%E6%A0%87%E5%8D%95%E5%87%BB%E8%BE%93%E5%85%A5">上面</a>所说，运算完毕后如果按下数字键之前会自动帮你按下<code>C</code>键</p><p>2.6版本后，如果计算完成后按下<code>+</code>,<code>-</code>,<code>×</code>,<code>÷</code>,<code>=</code>这些键，将自动将结果继续运算</p><p>不过多解释了，直接看动图</p><p><img src="/images/3/11.gif" alt="tupian"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>本软件使用易语言编写 <del>(因为作者太菜</del> ,如果有被杀毒软件报毒属正常现象，请放心使用。<br>使用过程中如果发现任何问题均可联系作者(qq 2098581065)进行反馈</p><p>另附目前最新版2.6下载链接<a href="/images/3/2.6.exe" title="最新版">2.6.exe</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>函数平移工具使用方法</title>
      <link href="/2023/01/15/hanshupingyi/"/>
      <url>/2023/01/15/hanshupingyi/</url>
      
        <content type="html"><![CDATA[<p><del>我相信大家不看这篇介绍也会用(划掉</del></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>这是一款我自制的<del>且没什么用的</del>软件，目前支持上&#x2F;下及左&#x2F;右平移一次或二次函数图像的<strong>一般式</strong>，尤其是对于二次函数，<strong>省去了</strong>配方的步骤，方便快捷</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>下载最新版软件，双击打开，如下图<br><img src="/images/2/1.webp" alt="这是一张图片"><br>然后根据情况选择一次&#x2F;二次函数  </p><h3 id="一次函数"><a href="#一次函数" class="headerlink" title="一次函数"></a>一次函数</h3><p>点击“一次函数”，如下图<br><img src="/images/2/2.webp" alt="这是一张图片"><br>众所周知，一次函数的一般式为 <code>y=kx+b</code> ，我们只需要将<code>k</code>和<code>b</code>的值填入上方对应的框中即可，如果是小数就填小数，负数就填负数<br>如果要向上平移，就在“向上平移”填写对应的数值，向下平移的话就在此处填写负数。“向右平移”同理。<br>举个例子，<code>y=1.1x-4</code>,向上平移<code>5</code>，向左平移<code>14</code>，只需按下图方式填写<br><img src="/images/2/3.webp" alt="这是一张图片">  </p><p><em><strong>注意：当<code>k</code>的值为<code>1</code>时，请填写<code>1</code>而不要空着，空着视为<code>0</code>！</strong></em>  </p><p>然后点击“开始平移”，就会自动计算出平移后的函数解析式且为一般式<br><img src="/images/2/4.webp" alt="这是一张图片"><br>关闭该窗口或点击“返回”即可返回到主界面</p><h3 id="二次函数"><a href="#二次函数" class="headerlink" title="二次函数"></a>二次函数</h3><p>在主界面点击“二次函数”，如下图<br><img src="/images/2/5.webp" alt="这是一张图片"><br>又众所周知，二次函数一般式为 <code>y=ax²+bx+c</code> ,和一次函数一样，只需要将<code>a,b,c</code>的值填入对应框中即可。<br>举例，将 <code>y=5x²+2x+6</code> 向下平移<code>8</code>，向右平移<code>6</code>，只需按此填写即可<br><img src="/images/2/6.webp" alt="这是一张图片"></p><p><em><strong>注意：当<code>a</code>的值为<code>1</code>时，请填写<code>1</code>而不要空着，空着视为<code>0</code>！</strong></em></p><p>点击“开始平移”就会自动计算出平移后的函数解析式且为一般式。<br><img src="/images/2/7.webp" alt="tupian"><br>关闭该窗口或点击“返回”即可返回到主界面</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>本软件使用易语言编写 <del>(因为作者太菜</del> ,如果有被杀毒软件报毒属正常现象，请放心使用。<br>使用过程中如果发现任何问题均可联系作者(qq 2098581065)进行反馈</p><p><del>另外，这个软件纯属写着玩，请大佬轻喷</del></p><p>附目前最新版2.3下载链接：<a href="/images/2/2.3.exe">2.3.exe</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>欢迎来到我的博客！</title>
      <link href="/2023/01/13/welcome/"/>
      <url>/2023/01/13/welcome/</url>
      
        <content type="html"><![CDATA[<h1 id="欢迎来到我的博客！"><a href="#欢迎来到我的博客！" class="headerlink" title="欢迎来到我的博客！"></a>欢迎来到我的博客！</h1><p><del>本站使用Github pages搭建，国内访问速度<strong>可能</strong>较慢，还请见谅</del></p><p>一时竟想不起说什么（</p><p>在这里，我或许会不定时更新一些好玩的东西 <del>(可能并不好玩)</del>  </p><p>简单介绍下这个博客吧，看到右下角那个设置图标了吧，点一下，可以选择<code>深色模式</code>(目前网站深色模式会<strong>自动跟随系统</strong>)或者<code>阅读模式</code><br><del>至于其他的…自己摸索吧</del></p><p>欢迎各位来交换<a href="https://mt526.github.io/link/" title="欢迎各位~">友链</a>~<br>（请在评论区留言或发送至邮箱<code>2098581065*qq.com</code>或者直接加QQ*2098581098）</p><p><strong>本博客永久网址：<a href="https://mt526.github.io/" title="建议收藏">mt526.github.io</a></strong></p><p><strong>2023.12.30:<strong>自本日起为提高加载速度，本站所有图片均更改为<code>.webp</code>格式，但同时</strong>保留原有</strong>的<code>.png</code>或<code>.jpg</code>图片。 也就是说，您可以将图片链接后的<code>.webp</code>改为<code>.png</code>来下载原图。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
